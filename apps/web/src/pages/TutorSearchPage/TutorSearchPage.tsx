import React, { useState, useEffect, useRef } from 'react';
import styles from './TutorSearchPage.module.css';
import TutorCard from '../../components/TutorCard/TutorCard';
import SearchBar from '../../components/SearchBar/SearchBar';
import FiltersSidebar from '../../components/FiltersSideBar/FiltersSidebar';

export interface Tutor {
  id: number;
  name: string;
  subject: string;
  rating: number;
  reviews: number;
  price: string;
  emoji: string;
  status: string;
  badge: string;
  specialties: string[];
  gradient: string;
}

export interface Filters {
  level: string;
  priceRange: [number, number];
  rating: number;
  availability: string;
  teachingMode: string;
  location: string;
}

// Donn√©es mock directement dans le fichier
const mockTutors: Tutor[] = [
  {
    id: 1,
    name: "Mr. Chibani",
    subject: "Professeur en informatique",
    rating: 5,
    reviews: 128,
    price: "‚Ç¨100",
    emoji: "üë®‚Äçüè´",
    status: "En ligne",
    badge: "Free Trial",
    specialties: ["Python", "JavaScript", "Algorithmes", "Base de donn√©es"],
    gradient: "from-blue-500 to-indigo-500"
  },
  {
    id: 2,
    name: "Dr. Sarah Chen",
    subject: "Math√©matiques avanc√©es",
    rating: 5,
    reviews: 89,
    price: "‚Ç¨85",
    emoji: "üë©‚Äçüî¨",
    status: "Disponible",
    badge: "Populaire",
    specialties: ["Alg√®bre", "Analyse", "Statistiques", "Probabilit√©s"],
    gradient: "from-green-500 to-emerald-600"
  },
  {
    id: 3,
    name: "Prof. Martinez",
    subject: "Physique & Chimie",
    rating: 5,
    reviews: 67,
    price: "‚Ç¨75",
    emoji: "üë®‚Äçüî¨",
    status: "En ligne",
    badge: "Nouveau",
    specialties: ["M√©canique", "Thermodynamique", "Chimie organique"],
    gradient: "from-purple-500 to-pink-600"
  },
  {
    id: 4,
    name: "Mme. Dubois",
    subject: "Langues √©trang√®res",
    rating: 5,
    reviews: 203,
    price: "‚Ç¨65",
    emoji: "üë©‚Äçüè´",
    status: "Disponible",
    badge: "√âconomique",
    specialties: ["Anglais", "Espagnol", "Pr√©paration examens"],
    gradient: "from-orange-500 to-red-400"
  },
  {
    id: 5,
    name: "Mr. Tanaka",
    subject: "Sciences √©conomiques",
    rating: 5,
    reviews: 156,
    price: "‚Ç¨90",
    emoji: "üë®‚Äçüíº",
    status: "En ligne",
    badge: "Expert",
    specialties: ["Micro√©conomie", "Macro√©conomie", "Finance"],
    gradient: "from-cyan-400 to-sky-400"
  },
  {
    id: 6,
    name: "Dr. Laurent",
    subject: "Philosophie & Lettres",
    rating: 5,
    reviews: 94,
    price: "‚Ç¨70",
    emoji: "üë®‚Äçüéì",
    status: "Disponible",
    badge: "Mentor",
    specialties: ["Dissertation", "Culture g√©n√©rale", "M√©thodologie"],
    gradient: "from-amber-500 to-yellow-500"
  },
  {
    id: 7,
    name: "Mme. Kowalski",
    subject: "Biologie & M√©decine",
    rating: 5,
    reviews: 78,
    price: "‚Ç¨95",
    emoji: "üë©‚Äç‚öïÔ∏è",
    status: "En ligne",
    badge: "Expert",
    specialties: ["Anatomie", "Physiologie", "Biochimie", "G√©n√©tique"],
    gradient: "from-teal-500 to-green-500"
  },
  {
    id: 8,
    name: "Mr. Schmidt",
    subject: "Ing√©nierie",
    rating: 5,
    reviews: 112,
    price: "‚Ç¨110",
    emoji: "üë®‚Äçüîß",
    status: "Disponible",
    badge: "Populaire",
    specialties: ["M√©canique", "√âlectricit√©", "Automatisme", "Robotique"],
    gradient: "from-gray-600 to-gray-800"
  },
  {
    id: 9,
    name: "Dr. Garcia",
    subject: "Chimie avanc√©e",
    rating: 5,
    reviews: 63,
    price: "‚Ç¨80",
    emoji: "üë®‚Äçüî¨",
    status: "En ligne",
    badge: "Nouveau",
    specialties: ["Chimie organique", "Chimie analytique", "Spectroscopie"],
    gradient: "from-purple-600 to-indigo-600"
  }
];

const TutorSearchPage: React.FC = () => {
  const [filters, setFilters] = useState<Filters>({
    level: '',
    priceRange: [7, 100],
    rating: 0,
    availability: '',
    teachingMode: '',
    location: ''
  });

  const [tutors, setTutors] = useState<Tutor[]>([]);
  const [loading, setLoading] = useState(false);
  const [showFilters, setShowFilters] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [filteredSubjects, setFilteredSubjects] = useState<string[]>([]);
  const searchInputRef = useRef<HTMLInputElement>(null);

  // Toutes les mati√®res disponibles
  const allSubjects: string[] = [
    'Math√©matiques', 'Physique', 'Chimie', 'Fran√ßais', 'Anglais',
    'Histoire-G√©ographie', 'SVT', 'Philosophie', '√âconomie', 'Informatique',
    'Espagnol', 'Allemand', 'Italien', 'Latin', 'Grec ancien',
    'Sciences de l\'ing√©nieur', 'Technologie', 'Arts plastiques', 'Musique',
    '√âducation physique', 'Droit', 'Gestion', 'Marketing', 'Communication',
    'Programmation', 'D√©veloppement web', 'Intelligence artificielle',
    'Statistiques', 'Probabilit√©s', 'Alg√®bre', 'G√©om√©trie', 'Analyse',
    'M√©canique', '√âlectricit√©', 'Optique', 'Thermodynamique',
    'Chimie organique', 'Biochimie', 'G√©ologie', '√âcologie'
  ];

  const levels: string[] = [
    'Coll√®ge', 'Seconde', 'Premi√®re', 'Terminale', 'Licence', 'Master', 'Doctorat'
  ];

  const teachingModes: string[] = ['En ligne', 'En pr√©sentiel', 'Les deux'];
  const availabilityOptions: string[] = ['Disponible maintenant', 'Cette semaine', 'Ce mois-ci'];

  // Filtrage des mati√®res qui commencent par la recherche
  useEffect(() => {
    if (searchQuery.trim() === '') {
      setFilteredSubjects(allSubjects.slice(0, 8));
      setShowSuggestions(false);
    } else {
      const filtered = allSubjects.filter(subject =>
        subject.toLowerCase().startsWith(searchQuery.toLowerCase())
      );
      setFilteredSubjects(filtered.slice(0, 10));
      setShowSuggestions(true);
    }
  }, [searchQuery]);

  // Fermer les suggestions quand on clique ailleurs
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (searchInputRef.current && !searchInputRef.current.contains(event.target as Node)) {
        setShowSuggestions(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const handleSearch = async (): Promise<void> => {
    setLoading(true);
    setTimeout(() => {
      setTutors(mockTutors);
      setLoading(false);
    }, 1000);
  };

  const handleReset = (): void => {
    setFilters({
      level: '',
      priceRange: [7, 100],
      rating: 0,
      availability: '',
      teachingMode: '',
      location: ''
    });
    setSearchQuery('');
  };

  const handleSubjectSelect = (subject: string): void => {
    setSearchQuery(subject);
    setShowSuggestions(false);
  };

  const handleQuickSearch = (): void => {
    if (searchQuery.trim()) {
      handleSearch();
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent): void => {
    if (e.key === 'Enter') {
      handleQuickSearch();
    }
  };

  useEffect(() => {
    handleSearch();
  }, []);

  return (
    <div className={styles.tutorSearchPage}>
      {/* Header */}
      <div className={styles.searchHeader}>
        <div className={styles.headerText}>
          <h1>Trouvez votre tuteur</h1>
          <p>Des tuteurs experts pour vous accompagner dans votre r√©ussite</p>
        </div>
      </div>

      <div className={`${styles.container} ${styles.mainContainer}`}>
        <div className={styles.layout}>
          {/* Sidebar Filtres */}
          <FiltersSidebar
            filters={filters}
            setFilters={setFilters}
            handleSearch={handleSearch}
            handleReset={handleReset}
            loading={loading}
            levels={levels}
            teachingModes={teachingModes}
            availabilityOptions={availabilityOptions}
          />

          {/* Contenu principal */}
          <div className={styles.mainContent}>
            {/* Barre de recherche */}
            <SearchBar
              searchQuery={searchQuery}
              setSearchQuery={setSearchQuery}
              showSuggestions={showSuggestions}
              setShowSuggestions={setShowSuggestions}
              filteredSubjects={filteredSubjects}
              handleSubjectSelect={handleSubjectSelect}
              handleQuickSearch={handleQuickSearch}
              handleKeyPress={handleKeyPress}
              searchInputRef={searchInputRef}
            />

            {/* Bouton filtres mobile */}
            <button 
              onClick={() => setShowFilters(!showFilters)}
              className={styles.filterToggle}
            >
              {showFilters ? 'Masquer les filtres' : 'Afficher les filtres'}
            </button>

            {/* Filtres mobile */}
            {showFilters && (
              <div className={styles.mobileFilters}>
                <FiltersSidebar
                  filters={filters}
                  setFilters={setFilters}
                  handleSearch={handleSearch}
                  handleReset={handleReset}
                  loading={loading}
                  levels={levels}
                  teachingModes={teachingModes}
                  availabilityOptions={availabilityOptions}
                  isMobile={true} 
                />
              </div>
            )}

            {/* R√©sultats */}
            <div className={styles.resultsHeader}>
              <div className={styles.resultsInfo}>
                <h2 className={styles.resultsCount}>{tutors.length} tuteurs trouv√©s</h2>
                <p className={styles.resultsSubtitle}>
                  {searchQuery ? `R√©sultats pour "${searchQuery}"` : 'Tous les tuteurs disponibles'}
                </p>
              </div>
              <div className={styles.sortOptions}>
                <select className={styles.sortSelect}>
                  <option>Trier par: Pertinence</option>
                  <option>Note d√©croissante</option>
                  <option>Prix croissant</option>
                  <option>Prix d√©croissant</option>
                </select>
              </div>
            </div>

            {/* Grille des tuteurs */}
            {loading ? (
              <div className={styles.tutorsGrid}>
                {[...Array(6)].map((_, i: number) => (
                  <div key={i} className={styles.skeletonLoader}>
                    <div className={styles.skeletonAvatar}></div>
                    <div className={`${styles.skeletonText} ${styles.short}`}></div>
                    <div className={`${styles.skeletonText} ${styles.medium}`}></div>
                    <div className={`${styles.skeletonText} ${styles.short}`}></div>
                  </div>
                ))}
              </div>
            ) : (
              <div className={styles.tutorsGrid}>
                {tutors.map((tutor: Tutor) => (
                  <TutorCard key={tutor.id} tutor={tutor} />
                ))}
              </div>
            )}

            {/* Pagination */}
            {tutors.length > 0 && (
              <div className={styles.pagination}>
                <button className={styles.paginationButton}>Pr√©c√©dent</button>
                <button className={`${styles.paginationButton} ${styles.active}`}>1</button>
                <button className={styles.paginationButton}>2</button>
                <button className={styles.paginationButton}>3</button>
                <button className={styles.paginationButton}>Suivant</button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default TutorSearchPage;